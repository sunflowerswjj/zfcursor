面向对象
object oriented programming 以对象数据类型为导向的编程
封装插件和库 以后实现相同功能时,只需要调用即可

单例模式 工厂模式 构造函数模式 原型模式
是按照需求一步步演变而来,都是前面这种模式的提升和改造

单例模式:就是一个对象
    优点:具有封装性,能避免跟全局变量冲突和污染,最简单的模块化开发
    缺点:手工业的,效率低,有很多冗余代码
    解决:工厂模式

工厂模式:批量的生产生产对象,没法准确的识别对象,也就是不知道是对象里的哪一类,返回的全是对象

构造函数模式:能准确告诉你,生产出的对象是哪种的对象,并且只能生产出这种的对象
    缺点:所有的属性和方法都是私有
    解决:把公有的属性和方法放在原型上

原型(prototype)模式:解决共享问题
原型基础:
1.每个函数(构造函数)上有个属性prototype,指向于原型对象,prototype是个对象
2.prototype上有个属性叫constructor,指向当前的构造函数
3.每个对象(实例)上都天生存在一个属性__proto__,指向当前实例所属类的原型

原型这边查找属性和方法
1.若是实例私有的,则用私有,其他的不用看
2.若实例上没有,则往实例所属类的原型上找,找到了则用原型上公有的方法
3.若还没有,则往所属类(父类)的原型上查找

通过__proto__就形成了实例的原型链
在原型链上所有的属性和方法,实例都可以访问得到
IE浏览器禁止操作__proto__

继承:将父类的私有的,公有的属性和方法拿到子类用
继承的好处:减少冗余代码,提交开发效率
继承的关键:__proto__是实现继承的关键
缺点:子类的原型对象会被污染
最优的解决方案是:把父类私有的属性放在子类的实例上用,成为子类的私有属性
                父类的公有属性通过__proto__找到然后再用

