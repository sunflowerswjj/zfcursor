 元字符和修饰符
1.特殊含义的元字符
\ \d \.
\d 0-9
\w 字母,数字,_
\s 空白字符 空格\t\r\v
\b 匹配一个单词的边界
\n 匹配一个换行的字符
. 除了换行以外的其他字符
^ 以某个字符开头
$ 以某个字符结尾
x|y x或y
[xyz] x或y或z
[^xyz] 除了x,y,z以外的其他字符
[A-Z] 匹配A-Z之间连续的字符中的一个

量词元字符
+ 1次或多次 {1,}
* 0次或多次 {0,}
? 0次或1次 {0,1}
{n} 匹配n次
{n,}匹配n到多次
{n,m} 匹配n到m次

修饰符
global 全文查找 (g)  默认值是false
ignoreCase 忽视大小写(i) 默认值是false
multiline 多行匹配(m) 默认值是false

捕获 exec
把匹配的内容拎出来,这就叫捕获
1)贪婪性
正常情况会尽可能多的去捕获
在量词后面加?,非贪婪匹配,它会尽可能少的去捕获
 var reg = /\d{1,2}/;
  没加?则会捕获两个数字
  在{1,2}后面加?后,则只会捕获到一个数字->非贪婪匹配

2)懒惰性
 解决懒惰性,在正则后面加g
 字符串.match(reg)能一次性把所有匹配内容捕获到,那是否exec方法就能抛弃掉了呢?

exec(),match(),replace()

总结:
?  出现0次或1次
+? 非贪婪匹配
(?:)匹配不捕获




