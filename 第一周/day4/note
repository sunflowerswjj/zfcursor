面向对象
object oriented programming(oop) 以对象数据类型为导向的编程
1.为啥要学?
1)能够了解内置方法的来龙去脉
2)更加了解代码在浏览器里的运行内在机制
3)提交编写代码的效率
2.特点:
  1)高内聚,低耦合
  2)封装性
  3)继承:子类继承父类的属性和方法
  4)多态:重载和重写
   重载:在js里,指根据不同的参数类型,执行不同的代码 (仿的,自己去判断)
   重写:子类重写父类里的属性和方法
  对象,类,实例
  地球,人类,植物类,生物类,动物类

  对象:万物皆对象
  类:从对象中细分的类型
  实例:指实实在在存在的事物
  对象类型(Object,Array,RegExp,Math,Date....);
  var ary = [];
  var reg = /\d+/
 3.面向对象编程从四种设计模式来详细的了解下:单例模式,工厂模式,构造函数模式,原型模式
  这四种模式是根据需求一步步演变过来
  ① 单例模式
   说白了就是一个对象
   1.避免全局变量冲突和污染
   2.封装性
  模块调用问题:
  1.本模块里的方法或属性 this.属性名
  2.不同模块里的方法或属性 模块名.属性名
  这种是单例模式里的门户大开型 --DOM库就是用单例模式来封装
  另外一种:通过闭包可以设置私有的属性和方法
  缺点:
  属于手工业的,效率低,有很多冗余代码
  解决:工厂模式

  ②工厂模式
  1)引进原材料              1)创建对象
  2)对原材料进行加工和处理    2)对对象添加属性和方法
  3)输出成品                3)return 对象

  批量生产,生产出来都是对象object
  内置类:
  Object/Array/RegExp/Math/Date/Number/String/Boolean
  自己想去把对象分类 ->自定义类 ->构造函数

  ③ 构造函数模式 :能实现产品的差异化,对对象分类
   1)与工厂模式的区别
     1.函数名大写
     2.不需要第1步和第3步,第1步和第3步系统帮我们自动完成,只需要第2步
     3.通过new 去运行这个方法
   2)构造函数的注意点:
     1.通过new去执行函数,这个函数称为构造函数
     2.构造函数里的this指的是实例
     3.this.xxx 所有的属性和方法是实例私有的属性和方法
     4.创建对象和返回对象这一步系统自动帮我们完成,我们不需要去自己操作
         若自己非得返回:
            基本数据类型的没有影响
            引用数据类型的会覆盖系统默认返回的对象

     5.new Person()已经创建了实例,只是是一个匿名实例
     6.若不需要传参数,运行时()可省略-> new Person;
     7.通过var定义的变量和实例无关,实例只跟this.xxx有关
   3)目的:
     对对象分类,每次产生的对象能知道属于哪个类
   4)缺点:
     没法解决产品公有化,所有的属性和方法都是私有
     如果想所有的实例都是公共的属性和方法,如何解决?原型模式来解决

   ④原型模式:解决属性或方法公有化
    prototype 原型 只要写在原型上的属性和方法,就是公共的,这样所有的实例都能访问
    1)原型基础知识:
    1.每个函数上都有个prototype属性,prototype是个对象
    2.prototype对象上有个属性叫constructor,它指向当前的构造函数
    3.每个对象上都有个__proto__,它指向实例所属类的原型
    属性和方法查找的顺序
    1.若自己实例有,则表示是私有的,不会再继续查找
    2.若没有,则通过__proto__去当前实例所属类的原型上查找,找到了则用原型上的
    3.若还没有找到,继续通过__proto__往父类找...直到找到Object类的原型上,若都没找到则返回undefined
    Object类是基类,其他类是派生类
    __proto__一级一级往父类上查找,则形成了原型链
    __proto__是实现原型继承的关键

    Object.prototype有些公共的方法
    hasOwnProperty  判断是否是私有的属性
    isPrototypeOf 前面的对象是否在后面对象的原型链上
    propertyIsEnumerable 是否是可枚举的属性
    toString 下周时再详细讲

    预习视频:
    课时18
    课时19


















