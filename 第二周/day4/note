1.正则的定义
处理字符串,设定字符串的规则(模型);
操作的是正则类原型上的两个方法从而达到以下目的
1.字符串是否匹配正则的规则 - 匹配 正则.test()
2.字符串中匹配的拎出来 -捕获  正则.exec() 字符串.match()  字符串.replace() ,字符串.split()
2.正则的组成部分
   1.元字符(特殊含义的元字符和普通元字符)和修饰符组成
   ①特殊含义的元字符
   \转义的意思 \能把普通字符转换成特殊含义的字符 例如 \d(0-9之间的一个数)  把特殊含义的字符转换成本身的含义 例如\.->.本身
   \d 0-9之间的数字
   \D 匹配的内容和小写的相反
   \w A-Z或a-z或0-9或_ 匹配数字,字母,下划线中的一个
   \W 匹配的内容和小写的相反
   \s 匹配一个空白字符 例如空格,\t\r\v
   \S 除了\s以外的字符
   \n 匹配一个换行字符
   .  除\n以外的任意字符
   \b 匹配单词的一个边界 /er\b/ "never"
   \B 和\b相反
   ^ 以某个字符开头
   $ 以某个字符结尾
   [abc] 匹配a或b或c中的一个
   [^abc] 除了abc以外的字符
   [a-z] 匹配a-z之间的任意一个字符
   [^a-z] 除了a-z之间的其他字符
   () 分组
   | 或

   量词的元字符
   * 0到多次 {0,}
   + 1到多次 {1,}
   ? 0次或1次 {0,1}
   {n}  匹配n次
   {n,} 匹配n到多次
   {n,m} 匹配n到m次


   修饰符:
   global:全文查找 (g)
   ignoreCase:忽视大小写(i)
   multiline:多行匹配 (m)

3.定义正则:
    1.字面量的方式 var reg = /\d/g
    2.实例创建的方法 var reg = new RegExp("元字符","修饰符")


4.常用正则的细节知识点
 1)中括号的细节
    1.只能表示一位数,不能表示多位数
    2.[]里有些特殊含义的字符例如+.*?代表本身的含义 \d,\w,\s这种还是代表特殊元字符的含义

 2)小括号的细节
    1.分组改变优先级的作用
    2.分组引用
    3.分组捕获 exec








